apiVersion: v1
kind: Namespace
metadata:
  name: k8s-test-app
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-test-app-config
  namespace: k8s-test-app
data:
  ENVIRONMENT: "development"
  PORT: "3000"
---
apiVersion: v1
kind: Secret
metadata:
  name: k8s-test-app-db-secret
  namespace: k8s-test-app
type: Opaque
data:
  # Example: echo -n "postgres://user:password@postgres-service:5432/testdb" | base64
  # This isn't an actual database connection string
  DB_CONNECTION_STRING: cG9zdGdyZXM6Ly91c2VyOnBhc3N3b3JkQHBvc3RncmVzLXNlcnZpY2U6NTQzMi90ZXN0ZGI=
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: k8s-test-app-pvc
  namespace: k8s-test-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-test-app
  namespace: k8s-test-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-test-app
  template:
    metadata:
      labels:
        app: k8s-test-app
    spec:
      containers:
      - name: k8s-test-app
        image: ghcr.io/rodmhgl/k8s-test-app:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: k8s-test-app-config
              key: ENVIRONMENT
        - name: DB_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: k8s-test-app-db-secret
              key: DB_CONNECTION_STRING
        - name: PVC_PATH
          value: "/data"
        volumeMounts:
        - name: test-data
          mountPath: /data
      volumes:
      - name: test-data
        persistentVolumeClaim:
          claimName: k8s-test-app-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-test-app-service
  namespace: k8s-test-app
spec:
  type: NodePort
  selector:
    app: k8s-test-app
  ports:
  - port: 80
    targetPort: 3000
    nodePort: 30080